import os
import json

from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from openai import OpenAI
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from fastapi.dependencies import Depends

# Environment Variables:
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

# Database Configuration (if applicable):
DATABASE_URL = os.environ.get("DATABASE_URL")

# Application Configuration:
DEBUG = os.environ.get("DEBUG", False)
PORT = int(os.environ.get("PORT", 5000))

# Create the FastAPI Application
app = FastAPI()

# Data Models:
class PromptRequest(BaseModel):
    model: str
    prompt: str

# Define a route for generating responses
@app.post("/generate_response")
async def generate_response(request: Request):
    # Parse the incoming request body as JSON
    request_data = await request.json()

    # Validate the request data
    try:
        prompt = PromptRequest(**request_data)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=f"Invalid request data: {e}")

    # Use OpenAI API to generate a response
    try:
        openai = OpenAI(api_key=OPENAI_API_KEY)
        response = await openai.completions.create(
            model=prompt.model,
            prompt=prompt.prompt,
        )
        return JSONResponse({"response": response.choices[0].text})
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error processing request: {e}")

# Database Connection (if applicable):
if DATABASE_URL:
    engine = create_engine(DATABASE_URL)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    # Define a function to get a database session
    def get_db():
        db = SessionLocal()
        try:
            yield db
        finally:
            db.close()

# Example database interaction (if applicable):
@app.get("/get_response_history")
async def get_response_history(db: SessionLocal = Depends(get_db)):
    # Implement logic to retrieve response history from the database
    # Example:
    responses = db.query(ResponseHistory).all()
    return JSONResponse({"responses": responses})